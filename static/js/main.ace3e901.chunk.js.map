{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","setReversed","NONE","sortType","setSortType","visibleGoods","orderedList","sort","p1","p2","ALPHABET","localeCompare","LENGTH","length","reverse","orderGoodsList","className","type","classNames","onClick","reversed","map","product","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,mEAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,YAAAA,E,oBAAAA,E,iBAAAA,M,KAME,IAAME,EAAgB,WAC3B,MAAkCC,oBAAkB,GAApD,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAAmBH,EAASM,MAA5D,mBAAOC,EAAP,KAAiBC,EAAjB,KA4BMC,EArBiB,WACrB,IAAMC,EAAW,UAAOT,GAaxB,OAXAS,EAAYC,MAAK,SAACC,EAAIC,GACpB,OAAQN,GACN,KAAKP,EAASc,SACZ,OAAOF,EAAGG,cAAcF,GAC1B,KAAKb,EAASgB,OACZ,OAAOJ,EAAGK,OAASJ,EAAGI,OACxB,QACE,OAAO,MAITb,EACKM,EAAYQ,UAGdR,EAGYS,GAErB,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CAAE,WAAYf,IAAaP,EAASc,WAEtCS,QAAS,kBAAMf,EAAYR,EAASc,WAPtC,iCAYA,wBACEO,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,WAAYf,IAAaP,EAASgB,SAEtCO,QAAS,kBAAMf,EAAYR,EAASgB,SAPtC,4BAYA,wBACEK,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,YAAalB,IAEjBmB,QAAS,WACPlB,GAAY,SAAAmB,GAAQ,OAAKA,MAR7B,sBAaEpB,GAAcG,IAAaP,EAASM,OACpC,wBACEe,KAAK,SACLD,UAAU,4BACVG,QAxEa,WACrBf,EAAYR,EAASM,MACrBD,GAAY,IAmEN,sBAUJ,oBAAIe,UAAU,YAAd,SACGX,EAAagB,KAAI,SAAAC,GAAO,OACvB,oBAAkB,UAAQ,OAA1B,SACGA,GADMA,YC1GnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.ace3e901.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE = 'NONE',\n  ALPHABET = 'APLHABET',\n  LENGTH = 'LENGTH',\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setReversed] = useState<boolean>(false);\n  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n\n  const resetGoodsList = (): void => {\n    setSortType(SortType.NONE);\n    setReversed(false);\n  };\n\n  const orderGoodsList = (): string[] => {\n    const orderedList = [...goodsFromServer];\n\n    orderedList.sort((p1, p2) => {\n      switch (sortType) {\n        case SortType.ALPHABET:\n          return p1.localeCompare(p2);\n        case SortType.LENGTH:\n          return p1.length - p2.length;\n        default:\n          return 0;\n      }\n    });\n\n    if (isReversed) {\n      return orderedList.reverse();\n    }\n\n    return orderedList;\n  };\n\n  const visibleGoods = orderGoodsList();\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-info',\n            { 'is-light': sortType !== SortType.ALPHABET },\n          )}\n          onClick={() => setSortType(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-success',\n            { 'is-light': sortType !== SortType.LENGTH },\n          )}\n          onClick={() => setSortType(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={() => {\n            setReversed(reversed => !reversed);\n          }}\n        >\n          Reverse\n        </button>\n        {(isReversed || sortType !== SortType.NONE) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={resetGoodsList}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul className=\"GoodsList\">\n        {visibleGoods.map(product => (\n          <li key={product} data-cy=\"Good\">\n            {product}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}